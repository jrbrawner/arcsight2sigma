import copy
from treelib import Node, Tree

class SigmaYamlConverter:

    def __init__(self, condition_data):

        self.condition_data = condition_data
       

        self.condition_list : list[dict[str,list]] = []
        self.final_list : list[dict[str,list]] = []
        self.sigma_condition_list: list = []

        self.tree : Tree = Tree()
        
        self.convert_to_sigma_rule(self.condition_data)
        self.__magic()
        self.__dispatch_parsing()

        
                
    def convert_to_sigma_rule(self, condition):

        if condition.get("type") == 'and':
            key = "and"
            conditions = [self.convert_to_sigma_rule(definition) for definition in condition['definitions']]
        elif condition.get("type") == 'or':
            conditions = [self.convert_to_sigma_rule(definition) for definition in condition['definitions']]
            key = "or"
        elif condition.get("type") == 'not':
            conditions = [self.convert_to_sigma_rule(condition['definitions'][0])]
            key = "not"
        else:
            return condition
        
        self.condition_list.append({key : conditions})
        
    def __magic(self):

        
        for idx, condition in enumerate(self.condition_list):
            
            key = list(condition.keys())[0]
            entry = condition.get(key)

            none_count = entry.count(None)
            
            while None in entry:
                entry.remove(None)
            if none_count > 0:
                if self.condition_list[idx-none_count].get(key) is not None:
                    #self.condition_list[idx-none_count].get(key).append(condition)
                    self.condition_list[idx-none_count].get(key).append(condition.get(key))
                else:
                    self.condition_list[idx-none_count].update(condition)
                self.condition_list.remove(condition)
        
        
        for entry in self.condition_list:
            key = list(entry.keys())[0]
            if None in entry.get(key):
                self.__magic()
           
    def generate_sigma_rule(self):
        self.sigma_rule = {
            "title": "Generated Sigma Rule",
            "status": "experimental",
            "description": "Auto-generated Sigma rule from structured data",
            "author": "Generated by script",
            "logsource": {
                "category": "temp",
                "product": "temp"
            },
            "detection": {
                "condition": "temp"
            },
        }

        self.sigma_rule["detection"] = self.detections

        temp = []

        for i in self.sigma_rule["detection"]:
            if i != "condition":
                temp.append(i)
        self.sigma_rule["detection"]["condition"] = temp


    def __dispatch_parsing(self):

        for entry in self.condition_list:
            
            keys = list(entry.keys())
            
            for key in keys:
                print(key)

    
        


